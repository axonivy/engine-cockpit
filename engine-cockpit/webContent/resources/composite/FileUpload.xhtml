<html xmlns="http://www.w3.org/1999/xhtml" xmlns:f="http://xmlns.jcp.org/jsf/core" xmlns:h="http://xmlns.jcp.org/jsf/html"
  xmlns:ui="http://xmlns.jcp.org/jsf/facelets" xmlns:cc="http://xmlns.jcp.org/jsf/composite"
  xmlns:ic="http://ivyteam.ch/jsf/component" xmlns:p="http://primefaces.org/ui">
<cc:interface>
  <cc:attribute name="title" default="File Upload" />
  <cc:attribute name="apiUrl" />
  <cc:attribute name="acceptFiles" />
</cc:interface>
<cc:implementation>
  <p:dialog style="min-width: 400px;" header="#{cc.attrs.title}" id="fileUploadModal"
  widgetVar="fileUploadModal" modal="true" responsive="true" closeOnEscape="true">
    <form enctype="multipart/form-data" >
      <div style="min-height: 75px;" class="file-upload">
        <input type="file" id="fileInput" class="deploy-file" required="required" accept="#{cc.attrs.acceptFiles}" />
        <p:commandButton id="chooseFileBtn" type="button" icon="ui-icon-add" value="Choose file" 
          onclick="$('#fileInput').trigger('click')" style="width: 150px;"/>
        <span id="drop_zone">
          <span id="selectedFileOutput" class="file-upload-file" />
        </span>
        <div id="uploadError" class="file-upload-error" />
        <cc:insertChildren />
      </div>
      <p:commandButton id="uploadBtn" validateClient="true" type="button" value="Upload" icon="ui-icon-cloud-upload"
        styleClass="primary-btn modal-input-button" onclick="upload()" />
      <p:commandButton id="cancelDeploymentBtn" onclick="PF('fileUploadModal').hide();" value="Cancel" type="button"
        icon="ui-icon-clear" styleClass="secondary-btn modal-input-button" />
    </form>
    <script>
      var accepts = "#{cc.attrs.acceptFiles}".split(",").map(Function.prototype.call, String.prototype.trim);
      var file;
      
      function handleFile(file) {
        if (checkFileInput(file)) {
          this.file = file;
          $('#selectedFileOutput').text(file.name + " (" + file.size / 1000 + "kB)");
        } else {
          $('#selectedFileOutput').text("Choose or drop a file which ends with: #{cc.attrs.acceptFiles}");
          this.file = null;
        }
      }
    
      $("#fileInput").on("change", function(e) {
        handleFile(e.target.files[0]);
      });
      
      $(document).ready(function(e){
        handleFile(document.getElementById('fileInput').files[0]);
      });
      
      function checkFileInput(file) {
        if (file != null &amp;&amp; endsWithAnyAccepts(file.name)) {
          return true;
        } 
        return false;
      }
      
      function endsWithAnyAccepts(fileName) {
        return accepts.some(function (accept) {
          return fileName.endsWith(accept);
        });
      }
      
      $('#drop_zone').on('drag dragstart dragend dragover dragenter dragleave drop', function(e) {
        e.preventDefault();
        e.stopPropagation();
      })
      .on('dragover dragenter', function() {
        $('#drop_zone').addClass('is-dragover');
      })
      .on('dragleave dragend drop', function() {
        $('#drop_zone').removeClass('is-dragover');
      })
      .on('drop', function(e) {
        if(e.originalEvent.dataTransfer &amp;&amp; e.originalEvent.dataTransfer.files.length) {
          handleFile(e.originalEvent.dataTransfer.files[0]);
        }
      });
      
      function upload() {
        if (!file)
        {
          $('#uploadError').text("Choose a valid file before upload.");
          return;
        }
        var form_data = new FormData();
        form_data.append('file', file);
        if ('#{cc.attrs.apiUrl}'.endsWith('deployment')) {
          form_data.append('deployoptions', JSON.stringify(getDeployOptions()));
        }
        
        $.ajax({
          url: '/ivy/api/#{advisorBean.app}/#{cc.attrs.apiUrl}',
          mimeType: 'multipart/form-data',
          cache: false,
          contentType: false,
          processData: false,
          data: form_data,
          method: 'POST',
          headers: {"X-Requested-By": "engine-cockpit"},
          async: true,
          crossDomain: false,
        }).done(function(response){
          var json = JSON.parse(response);
          if (json.status == 'ok') {
            window.location.reload();
          } else {
            $('#uploadError').text(json.message);
          }
        }).fail(function (request, status, error) {
          $('#uploadError').text(request.responseText);
        });
      }
    </script>
  </p:dialog>
</cc:implementation>
</html>
