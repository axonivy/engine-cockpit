<html xmlns="http://www.w3.org/1999/xhtml"
  xmlns:f="http://xmlns.jcp.org/jsf/core"
  xmlns:h="http://xmlns.jcp.org/jsf/html"
  xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
  xmlns:ic="http://ivyteam.ch/jsf/component"
  xmlns:p="http://primefaces.org/ui"
  xmlns:pe="http://primefaces.org/ui/extensions"
  xmlns:cc="http://xmlns.jcp.org/jsf/composite/composite">
<h:body>
  <ui:composition template="../includes/template/wizard.xhtml">

    <ui:define name="content">
      <h:outputStylesheet name="resources/css/diff2html.css" />
      <h:outputScript name="resources/js/diff2html.min.js" />      
      <script>
      var diffOptions = {
        drawFileList: false,
        matching: 'words',
        outputFormat: 'side-by-side',
      }
      function showDiff(id, patch) {
        var diffHtml = Diff2Html.html(patch, diffOptions);
        document.getElementById(id).innerHTML = diffHtml;
      }
      </script>
      
      <div class="col card ui-fluid">
        <p:growl id="migrateGrowl" for="migrateGrowl" showDetail="true">
          <p:autoUpdate />
        </p:growl>
        <div class="flex align-items-center mb-3">
          <i class="pr-3 si si-navigation-right-circle card-title-icon"></i>
          <h2 class="m-0">Migrate old Axon Ivy Engine</h2>
          <p:linkButton href="#{advisorBean.engineGuideBaseUrl}/reference/migration-wizard.html" target="_blank" rel="noopener noreferrer"
            styleClass="ml-auto ui-button-outlined rounded-button" icon="si si-question-circle" />
        </div>

        <h:form id="locationForm">
          <p:panel style="margin-bottom:10px;">
            <p:panelGrid columns="2" layout="flex"
              contentStyleClass="align-items-center"
              columnClasses="col-12 md:col-3 lg:col-3, col-12 md:col-9 lg:col-9">
              <p:outputLabel for="oldEngineInput"
                value="Location of old Engine" />
              <h:panelGroup styleClass="md-inputfield">
                <p:inputText id="oldEngineInput"
                  requiredMessage="Value is required"
                  value="#{migrationBean.pathToOldEngine}"
                  required="true" />
                <p:message for="oldEngineInput"
                  id="oldEngineInputMessage" />
              </h:panelGroup>
            </p:panelGrid>

            <f:facet name="header">
              <p:panelGrid columns="2" layout="flex" contentStyleClass="align-items-center" columnClasses="col-10, col-2">
                <h:outputText value="Location" />
                <p:commandButton icon="si si-heavy-equipment-hook"
                value="Load Location" id="checkLocation"
                disabled="#{migrationBean.state == 'RUNNING'}"
                actionListener="#{migrationBean.checkOldEngineLocation}"
                validateClient="true"
                update="locationForm, migrationChecksForm, licenceUploadForm, migrationInPlaceForm, migrationTaskForm, summaryForm" />
              </p:panelGrid>
            </f:facet>
          </p:panel>
        </h:form>

        <h:form id="migrationChecksForm">
          <p:panel id="migrationChecks" style="margin-bottom:10px;"
            rendered="#{migrationBean.result != null}">
            <ui:repeat var="check"
              value="#{migrationBean.result.checks()}">
              <div>
                <i style="position: relative; top: 2px;"
                  class="#{check.success() ? 'si si-check-circle-1 state-active' : 'si si-delete-1 state-inactive'}"></i>
                <h:outputText value=" #{check.message()}" />
                <h:panelGroup rendered="#{not empty check.error()}">
                  <pre style="white-space: pre-wrap; word-break: break-all;"><code><h:outputText value="#{check.error()}" /></code></pre>
                </h:panelGroup>
              </div>
              <p:divider
                rendered="#{migrationBean.isNotLastCheck(check)}" />
            </ui:repeat>

            <f:facet name="header">
              <p:panelGrid columns="1" layout="flex" contentStyleClass="align-items-center" columnClasses="col-12">
                <h:outputText value="Checks" />
              </p:panelGrid>
            </f:facet>
          </p:panel>
        </h:form>

        <h:form id="licenceUploadForm" enctype="multipart/form-data">
          <p:panel style="margin-bottom:10px;" rendered="#{migrationBean.licenceCheck()}">
            <p:messages id="licenceMessage" />

            <h:panelGroup rendered="#{migrationBean.validLicence}">
              <p:staticMessage severity="info" detail="Valid licence found." />
              <pre><code><h:outputText value="#{migrationBean.licence}" /></code></pre>
            </h:panelGroup>
 
            <h:panelGroup rendered="#{!migrationBean.validLicence}">
              <p:staticMessage severity="warn" detail="Licence is not valid. Please upload a new licence otherwise you can not start the Axon Ivy Engine after migration. Reason: #{migrationBean.invalidLicenceMessage}" />
            </h:panelGroup>

            <f:facet name="header">
              <p:panelGrid columns="2" layout="flex" contentStyleClass="align-items-center" columnClasses="col-10, col-2">
                <h:outputText value="Licence" />
                 <p:fileUpload id="licenceUpload" chooseIcon="si si-upload-bottom" 
                  style="font-weight: normal;width:100%;"                
                  label="Upload"
                  mode="simple" skinSimple="true" auto="true"
                  listener="#{migrationBean.handleUploadLicence}"
                  update="licenceUploadForm"
                  value="#{migrationBean.uploadedLicenceFile}" />
              </p:panelGrid>
            </f:facet>
          </p:panel>
        </h:form>

        <h:form id="migrationInPlaceForm">
          <p:panel id="migrationInPlace" rendered="#{migrationBean.inPlace}">
            <h:panelGroup id="migrationInPlaceInfo" layout="block">
                This migration is an in place migration.
                Therefore, the new Axon Ivy Engine will be installed in exactly the same place as the old Axon Ivy Engine.
                The configuration files in container environments, such as the <code>ivy.yaml</code>, may be provided in a read-only mode.
                As the migration needs to operate with write access onto these configuration files, you can define whether a temporary directory should be used to perform these changes.
                After the migration, you must manually add these files to the Axon Ivy Engine.
            </h:panelGroup>

            <h:panelGroup id="migrationInWriteToTmp" layout="block" style="margin-top:10px;">
              <p:selectBooleanCheckbox id="migrationTmpDir" value="#{migrationBean.writeToTmp}" itemLabel="Write configuration files to temporary directory">
                <p:ajax event="change" update="migrationInPlace" />
              </p:selectBooleanCheckbox>
            </h:panelGroup>

            <h:panelGroup id="migrationInWriteToTmpDir" layout="block" style="margin-top:10px;">
              <h:outputText value="Temporary Directory: " />
              <code>#{migrationBean.configurationTmpDir}</code>
            </h:panelGroup>
            
            <f:facet name="header">
              <p:panelGrid columns="1" layout="flex" contentStyleClass="align-items-center" columnClasses="col-12">
                <h:outputText value="In-Place Migration" />
              </p:panelGrid>
            </f:facet>
          </p:panel>
        </h:form>

        <h:form id="migrationTaskForm">
          <p:panel id="migrationTasks" style="margin-top: 20px;" styleClass="noPadding" rendered="#{migrationBean.result != null and migrationBean.result.success()}">
            <p:dataTable var="task" styleClass="noHeader" value="#{migrationBean.tasks}"
              id="taskTable" rowKey="#{task.name}">
              <p:column style="width:3%;">
                <h:panelGroup id="taskState" styleClass="task-icon">
                  <i class="mr-0 si si-#{task.stateIcon} link-icon"></i>
                </h:panelGroup>
              </p:column>

              <p:column style="width:92%">
                <b><h:outputText value="#{task.name}" /></b>
              </p:column>

              <p:column style="width:5%">
                <p:rowToggler />
              </p:column>

              <p:ajax event="rowToggle" listener="#{migrationBean.show(task)}" update="#{log}" />

              <p:rowExpansion>
                <p class="m-0">
                  <h:panelGroup rendered="#{not empty task.description}">
                    <h:outputText value="#{task.description}" escape="false" />
                  </h:panelGroup>
                  <h:panelGroup rendered="#{not empty task.script}">
                    <pre style="white-space: pre-wrap;"><code><h:outputText value="#{task.script}" /></code></pre>
                  </h:panelGroup>
                  
                  <p:divider align="left" type="dashed">
                    <p:commandButton actionListener="#{migrationBean.show(task)}" icon="si si-button-refresh-arrows" styleClass="ui-button-outlined" value="Log" update="log"></p:commandButton>
                  </p:divider>
                  <h:panelGroup id="log" styleClass="log">
                    <p:scrollPanel style="height:300px;width:100%;">
                      <h:panelGroup rendered="#{migrationBean.showLog(task)}">
                        <div style="padding:5px;">
                          <pre style="white-space: pre-wrap;margin:0px;"><code><h:outputText value="#{task.log}" /></code></pre>
                        </div>
                      </h:panelGroup>
                    </p:scrollPanel>
                  </h:panelGroup>
                </p>
              </p:rowExpansion>
            </p:dataTable>
            
            <f:facet name="header">
              <p:panelGrid columns="2" layout="flex" contentStyleClass="align-items-center" columnClasses="col-10, col-2">
                <h:outputText value="Migration Tasks" />
                <p:commandButton
                  onclick="PF('startMigrationModal').show();"
                  id="startMigration"
                  icon="#{migrationBean.startMigrationButtonIcon}"
                  value="#{migrationBean.startMigrationButtonName}"
                  disabled="#{migrationBean.state != 'START'}"
                   />
              </p:panelGrid>
            </f:facet>
            
            <p:poll interval="1"
                   stop="#{migrationBean.state != 'RUNNING'}"
                   update="startMigration @(.task-icon) summaryForm"
                   widgetVar="migrationPoller" />
          </p:panel>
        </h:form>

       <p:dialog style="min-width: 300px;" header="Start Migration" id="startMigrationModal"
        widgetVar="startMigrationModal" modal="true" responsive="true" closeOnEscape="true">
        <h:form id="startMigrationForm" styleClass="custom-dialog-form">
          <div>
            Before you start the Migration make sure you have a backup of your system database and the whole Axon Ivy Engine installation directory.
          </div>
          <div class="custom-dialog-footer">
            <p:commandButton id="startMigrationCancel" onclick="PF('startMigrationModal').hide();" value="Cancel" type="button"
              styleClass="ui-button-secondary ui-button-flat modal-input-button" style="width: 5rem;" />
            <p:commandButton id="startMigrationStart" value="Start" icon="si si-check-1"
              actionListener="#{migrationBean.execute}"
              update="locationForm migrationTaskForm"
              onsuccess="PF('migrationPoller').start();PF('startMigrationModal').hide();"
              style="width: 5rem;"
              styleClass="modal-input-button" />
          </div>
        </h:form>
      </p:dialog>

        <h:form id="summaryForm">
          <p:panel id="summaryPanel" style="margin-top: 10px;" rendered="#{migrationBean.state == 'FINISHED'}">
            <p:staticMessage severity="#{migrationBean.finishedSeverity}" escape="false" summary="#{migrationBean.finishedMessage}" />
            <p:messages id="migrationMessage" for="migrationMessage" showDetail="true" skipDetailIfEqualsSummary="true" />
            <pre style="white-space: pre-wrap; word-break: break-all; margin:0px;"><code><h:outputText value="#{migrationBean.summary}" /></code></pre>
            
            <f:facet name="header">
              <p:panelGrid columns="1" layout="flex" contentStyleClass="align-items-center" columnClasses="col-12">
                <h:outputText value="Summary" />
              </p:panelGrid>
            </f:facet>
          </p:panel>
        </h:form>
      </div>

      <style>
      .noHeader.ui-datatable table thead tr {
        display: none;
      }
      
      .noPadding.ui-panel .ui-panel-content {
        padding: 0px;
      }
      
      body .ui-panel .ui-panel-titlebar {
        padding: 2px;
        padding-left: 15px;
        padding-right: 15px;
        padding-top:10px;
        font-size:1.25rem;
      }
      </style>
    </ui:define>
  </ui:composition>
</h:body>
</html>
